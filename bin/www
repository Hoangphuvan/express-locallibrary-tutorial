#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("express-locallibrary-tutorial:server");
//var http = require("http");

// add by hoang
const https = require("https");
const fs = require("fs");

/**
 * Get port from environment and store in Express.
 */

// debug(`process.env.PORT: ${process.env.PORT}`); // added by hoang
// var port = normalizePort(process.env.PORT || "80");
// app.set("port", port);

/**
 * Create HTTP server.
 */

//var httpServer = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
// const httpPort = "80";
// httpServer.listen(httpPort);
// httpServer.on("error", onError);
// httpServer.on("listening", onHttpListening);

var key = fs.readFileSync(__dirname + "/../certs/private.key");
var cert = fs.readFileSync(__dirname + "/../certs/certificate.crt");
var options = {
  key: key,
  cert: cert,
};

var httpsServer = https.createServer(options, app);

const httpsPort = "443";
const port = httpsPort;
httpsServer.listen(httpsPort);
httpsServer.on("error", onError);
httpsServer.on("listening", onHttpsListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var httpsPort = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (httpsPort >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onHttpListening() {
  var addr = httpServer.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

function onHttpsListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
